#[cfg(test)]
mod tests {
use super::super::modules::*;
#[test]
fn test_PC(){
let mut m = PC::new();
m.in_ = 0;
m.reset = false;
m.load = false;
m.inc = false;
m.prop();
assert_eq!(m.out, 0);
assert_eq!(m.inc, false);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 0);
assert_eq!(m.load, false);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 0);
assert_eq!(m.inc, false);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 0);
assert_eq!(m.load, false);
m.inc = true;
m.prop();
assert_eq!(m.out, 0);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 0);
assert_eq!(m.load, false);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 1);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 0);
assert_eq!(m.load, false);
m.in_ = 33413;
m.prop();
assert_eq!(m.out, 1);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 33413);
assert_eq!(m.load, false);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 2);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 33413);
assert_eq!(m.load, false);
m.load = true;
m.prop();
assert_eq!(m.out, 2);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 33413);
assert_eq!(m.load, true);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 33413);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 33413);
assert_eq!(m.load, true);
m.load = false;
m.prop();
assert_eq!(m.out, 33413);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 33413);
assert_eq!(m.load, false);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 33414);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 33413);
assert_eq!(m.load, false);
m.prop();
assert_eq!(m.out, 33414);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 33413);
assert_eq!(m.load, false);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 33415);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 33413);
assert_eq!(m.load, false);
m.in_ = 12345;
m.load = true;
m.inc = false;
m.prop();
assert_eq!(m.out, 33415);
assert_eq!(m.inc, false);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 12345);
assert_eq!(m.load, true);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 12345);
assert_eq!(m.inc, false);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 12345);
assert_eq!(m.load, true);
m.reset = true;
m.prop();
assert_eq!(m.out, 12345);
assert_eq!(m.inc, false);
assert_eq!(m.reset, true);
assert_eq!(m.in_, 12345);
assert_eq!(m.load, true);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 0);
assert_eq!(m.inc, false);
assert_eq!(m.reset, true);
assert_eq!(m.in_, 12345);
assert_eq!(m.load, true);
m.reset = false;
m.inc = true;
m.prop();
assert_eq!(m.out, 0);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 12345);
assert_eq!(m.load, true);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 12345);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 12345);
assert_eq!(m.load, true);
m.reset = true;
m.prop();
assert_eq!(m.out, 12345);
assert_eq!(m.inc, true);
assert_eq!(m.reset, true);
assert_eq!(m.in_, 12345);
assert_eq!(m.load, true);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 0);
assert_eq!(m.inc, true);
assert_eq!(m.reset, true);
assert_eq!(m.in_, 12345);
assert_eq!(m.load, true);
m.reset = false;
m.load = false;
m.prop();
assert_eq!(m.out, 0);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 12345);
assert_eq!(m.load, false);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 1);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 12345);
assert_eq!(m.load, false);
m.reset = true;
m.prop();
assert_eq!(m.out, 1);
assert_eq!(m.inc, true);
assert_eq!(m.reset, true);
assert_eq!(m.in_, 12345);
assert_eq!(m.load, false);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 0);
assert_eq!(m.inc, true);
assert_eq!(m.reset, true);
assert_eq!(m.in_, 12345);
assert_eq!(m.load, false);
m.in_ = 0;
m.reset = false;
m.load = true;
m.prop();
assert_eq!(m.out, 0);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 0);
assert_eq!(m.load, true);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 0);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 0);
assert_eq!(m.load, true);
m.load = false;
m.inc = true;
m.prop();
assert_eq!(m.out, 0);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 0);
assert_eq!(m.load, false);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 1);
assert_eq!(m.inc, true);
assert_eq!(m.reset, false);
assert_eq!(m.in_, 0);
assert_eq!(m.load, false);
m.in_ = 22222;
m.reset = true;
m.inc = false;
m.prop();
assert_eq!(m.out, 1);
assert_eq!(m.inc, false);
assert_eq!(m.reset, true);
assert_eq!(m.in_, 22222);
assert_eq!(m.load, false);
m.posedge_clk();
m.prop();
assert_eq!(m.out, 0);
assert_eq!(m.inc, false);
assert_eq!(m.reset, true);
assert_eq!(m.in_, 22222);
assert_eq!(m.load, false);
}
}
