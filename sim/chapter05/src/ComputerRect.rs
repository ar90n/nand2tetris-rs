#[cfg(test)]
mod tests {
    use super::super::Computer::Computer;
    #[test]
    fn test_ComputerRect() {
        let expect_a_reg = vec![
            0, 0, 0, 23, 23, 16, 16, 16384, 16384, 17, 17, 17, 16384, 16384, 17, 17, 32, 32, 17,
            17, 16, 16, 10, 10, 17, 16416, 16416, 17, 17, 32, 32, 17, 17, 16, 16, 10, 10, 17,
            16448, 16448, 17, 17, 32, 32, 17, 17, 16, 16, 10, 10, 17, 16480, 16480, 17, 17, 32, 32,
            17, 17, 16, 16, 10, 10, 23,
        ];
        let expect_d_reg = vec![
            0, 0, 4, 4, 4, 4, 4, 4, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
            16416, 16416, 16416, 16416, 3, 3, 3, 3, 3, 3, 3, 16416, 16416, 16448, 16448, 16448,
            16448, 2, 2, 2, 2, 2, 2, 2, 16448, 16448, 16480, 16480, 16480, 16480, 1, 1, 1, 1, 1, 1,
            1, 16480, 16480, 16512, 16512, 16512, 16512, 0, 0, 0, 0,
        ];
        let expect_ram = vec![
            vec![
                4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                4, 4, 4, 4, 4, 4, 4, 4
            ],
            vec![
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0
            ],
            vec![
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0
            ],
        ];

        let program = vec![
            0b0000000000000000,
            0b1111110000010000,
            0b0000000000010111,
            0b1110001100000110,
            0b0000000000010000,
            0b1110001100001000,
            0b0100000000000000,
            0b1110110000010000,
            0b0000000000010001,
            0b1110001100001000,
            0b0000000000010001,
            0b1111110000100000,
            0b1110111010001000,
            0b0000000000010001,
            0b1111110000010000,
            0b0000000000100000,
            0b1110000010010000,
            0b0000000000010001,
            0b1110001100001000,
            0b0000000000010000,
            0b1111110010011000,
            0b0000000000001010,
            0b1110001100000001,
            0b0000000000010111,
            0b1110101010000111,
        ];
        let mut m = Computer::new(program);
        let mut time = 0;

        let check_output = |m: &mut Computer, time: usize| {
            assert_eq!(m.read_a_reg(), expect_a_reg[time]);
            assert_eq!(m.read_d_reg(), expect_d_reg[time]);
            assert_eq!(m.read_memory(0), expect_ram[0][time]);
            assert_eq!(m.read_memory(1), expect_ram[1][time]);
            assert_eq!(m.read_memory(2), expect_ram[2][time]);
        };

        let step_next = |m: &mut Computer| {
            m.prop();
            m.posedge_clk();
            m.prop();
        };

        m.reset = false;
        m.write_memory(0, 4);
        m.prop();
        check_output(&mut m, time);
        time += 1;

        for _ in 0..63 {
            step_next(&mut m);
            check_output(&mut m, time);
            time += 1;
        }
    }
}
